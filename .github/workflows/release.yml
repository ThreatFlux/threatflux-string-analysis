name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string

env:
  CARGO_TERM_COLOR: always

jobs:
  validate:
    name: Validate Release
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-registry-

    - name: Validate package
      run: cargo package --allow-dirty

    - name: Check if version matches tag
      if: github.event_name == 'push'
      run: |
        TAG_VERSION=${GITHUB_REF#refs/tags/v}
        CARGO_VERSION=$(cargo metadata --no-deps --format-version 1 | jq -r '.packages[0].version')
        if [ "$TAG_VERSION" != "$CARGO_VERSION" ]; then
          echo "Tag version ($TAG_VERSION) does not match Cargo.toml version ($CARGO_VERSION)"
          exit 1
        fi

  test-release:
    name: Test Release Build
    runs-on: ${{ matrix.os }}
    needs: validate
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-registry-

    - name: Build release
      run: cargo build --release --all-features

    - name: Run tests
      run: cargo test --release --all-features

  publish:
    name: Publish to Crates.io
    runs-on: ubuntu-latest
    needs: [validate, test-release]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-registry-

    - name: Publish to crates.io
      env:
        CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
      run: |
        cargo publish --allow-dirty

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate, test-release]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Generate changelog
      id: changelog
      run: |
        # Get the tag name
        TAG_NAME=${GITHUB_REF#refs/tags/}
        
        # Get the previous tag
        PREVIOUS_TAG=$(git tag --sort=-version:refname | grep -A1 "$TAG_NAME" | tail -n1)
        
        # Generate changelog
        if [ -n "$PREVIOUS_TAG" ] && [ "$PREVIOUS_TAG" != "$TAG_NAME" ]; then
          CHANGELOG=$(git log --pretty=format:"- %s (%h)" "$PREVIOUS_TAG".."$TAG_NAME")
        else
          CHANGELOG=$(git log --pretty=format:"- %s (%h)")
        fi
        
        echo "## Changes in $TAG_NAME" > CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "$CHANGELOG" >> CHANGELOG.md
        
        # Set output for use in release
        {
          echo 'changelog<<EOF'
          cat CHANGELOG.md
          echo 'EOF'
        } >> "$GITHUB_OUTPUT"

    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Release ${{ github.ref_name }}
        body: ${{ steps.changelog.outputs.changelog }}
        draft: false
        prerelease: ${{ contains(github.ref_name, 'alpha') || contains(github.ref_name, 'beta') || contains(github.ref_name, 'rc') }}

  build-artifacts:
    name: Build Release Artifacts
    runs-on: ${{ matrix.os }}
    needs: validate
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: threatflux-string-analysis-linux-x86_64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: threatflux-string-analysis-windows-x86_64
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: threatflux-string-analysis-macos-x86_64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-registry-

    - name: Build examples
      run: |
        cargo build --release --examples --target ${{ matrix.target }}

    - name: Package artifacts (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        mkdir -p artifacts
        cp target/${{ matrix.target }}/release/examples/* artifacts/ 2>/dev/null || true
        tar -czf ${{ matrix.artifact_name }}.tar.gz -C artifacts .

    - name: Package artifacts (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        mkdir artifacts
        Copy-Item "target/${{ matrix.target }}/release/examples/*.exe" artifacts/ -ErrorAction SilentlyContinue
        Compress-Archive -Path artifacts/* -DestinationPath ${{ matrix.artifact_name }}.zip

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}
        path: |
          ${{ matrix.artifact_name }}.tar.gz
          ${{ matrix.artifact_name }}.zip
        retention-days: 30

  update-badges:
    name: Update README Badges
    runs-on: ubuntu-latest
    needs: publish
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Update version badge
      run: |
        TAG_VERSION=${GITHUB_REF#refs/tags/v}
        sed -i "s/version-[0-9.]*/version-$TAG_VERSION/g" README.md

    - name: Commit badge updates
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add README.md
        git diff --staged --quiet || git commit -m "Update version badge to ${GITHUB_REF#refs/tags/}"
        git push