name: Documentation

on:
  push:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'Cargo.toml'
      - 'README.md'
      - 'docs/**'
      - '.github/workflows/docs.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'Cargo.toml'
      - 'README.md'
      - 'docs/**'
      - '.github/workflows/docs.yml'
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  check-docs:
    name: Check Documentation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-registry-

    - name: Check documentation build
      run: cargo doc --all-features --no-deps

    - name: Check for missing documentation
      run: |
        RUSTDOCFLAGS="-D missing_docs -D rustdoc::broken_intra_doc_links" \
        cargo doc --all-features --no-deps

    - name: Test documentation examples
      run: cargo test --doc --all-features

    - name: Check README examples
      run: |
        # Extract and test code examples from README.md
        if command -v mdbook >/dev/null 2>&1; then
          echo "Testing README examples would require mdbook setup"
        else
          echo "Skipping README example tests (mdbook not available)"
        fi

  build-docs:
    name: Build Documentation
    runs-on: ubuntu-latest
    needs: check-docs
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-registry-

    - name: Install mdbook (if needed)
      run: |
        if [ -f "book.toml" ]; then
          cargo install mdbook
        fi

    - name: Build API documentation
      run: |
        cargo doc --all-features --no-deps
        
        # Create an index.html that redirects to the main crate docs
        cat > target/doc/index.html << 'EOF'
        <!DOCTYPE html>
        <html>
        <head>
            <meta charset="utf-8">
            <meta http-equiv="refresh" content="0; url=threatflux_string_analysis/index.html">
            <title>ThreatFlux String Analysis Documentation</title>
        </head>
        <body>
            <p>Redirecting to <a href="threatflux_string_analysis/index.html">ThreatFlux String Analysis documentation</a>...</p>
        </body>
        </html>
        EOF

    - name: Build mdbook documentation (if exists)
      run: |
        if [ -f "book.toml" ]; then
          mdbook build
          mkdir -p target/doc/book
          cp -r book/* target/doc/book/
        fi

    - name: Generate changelog
      run: |
        mkdir -p target/doc
        if command -v git-cliff >/dev/null 2>&1; then
          git-cliff --output target/doc/CHANGELOG.html --config .github/cliff.toml || true
        else
          # Simple changelog generation
          echo "<h1>Changelog</h1>" > target/doc/CHANGELOG.html
          echo "<pre>" >> target/doc/CHANGELOG.html
          git log --pretty=format:"%h - %s (%cr) <%an>" --abbrev-commit >> target/doc/CHANGELOG.html
          echo "</pre>" >> target/doc/CHANGELOG.html
        fi

    - name: Add documentation metadata
      run: |
        cat > target/doc/info.json << EOF
        {
          "version": "$(cargo metadata --no-deps --format-version 1 | jq -r '.packages[0].version')",
          "commit": "$GITHUB_SHA",
          "branch": "$GITHUB_REF_NAME",
          "built_at": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
          "workflow_run": "$GITHUB_RUN_NUMBER"
        }
        EOF

    - name: Upload documentation artifacts
      uses: actions/upload-artifact@v4
      with:
        name: documentation
        path: target/doc/
        retention-days: 30

  deploy-docs:
    name: Deploy Documentation to GitHub Pages
    runs-on: ubuntu-latest
    needs: build-docs
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    permissions:
      contents: read
      pages: write
      id-token: write
    
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
    - name: Setup Pages
      uses: actions/configure-pages@v4

    - name: Download documentation artifacts
      uses: actions/download-artifact@v4
      with:
        name: documentation
        path: ./docs

    - name: Upload to GitHub Pages
      uses: actions/upload-pages-artifact@v3
      with:
        path: ./docs

    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4

  validate-links:
    name: Validate Documentation Links
    runs-on: ubuntu-latest
    needs: build-docs
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download documentation artifacts
      uses: actions/download-artifact@v4
      with:
        name: documentation
        path: ./docs

    - name: Install link checker
      run: |
        cargo install --force lychee

    - name: Check internal links
      run: |
        # Check links in documentation files
        lychee --accept 200,429 ./docs --exclude "file:///" || true

    - name: Check README links
      run: |
        # Check links in README and other markdown files
        lychee --accept 200,429 "README.md" "*.md" || true

  docs-coverage:
    name: Documentation Coverage
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@nightly

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
        key: ${{ runner.os }}-nightly-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-nightly-cargo-registry-

    - name: Install cargo-doc-coverage
      run: |
        # Check if cargo-doc-coverage is available, install if possible
        if cargo search cargo-doc-coverage --limit 1 >/dev/null 2>&1; then
          cargo install cargo-doc-coverage || echo "Failed to install cargo-doc-coverage"
        else
          echo "cargo-doc-coverage not available, using manual check"
        fi

    - name: Generate documentation coverage
      run: |
        # Try to use cargo-doc-coverage if available, otherwise do manual check
        if command -v cargo-doc-coverage >/dev/null 2>&1; then
          cargo doc-coverage --output-format json > doc-coverage.json || true
        else
          # Manual documentation coverage check
          echo "Generating manual documentation coverage report..."
          RUSTDOCFLAGS="-Z unstable-options --show-coverage" cargo doc --all-features --no-deps || true
        fi

    - name: Upload documentation coverage
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: documentation-coverage
        path: |
          doc-coverage.json
          target/doc/
        retention-days: 30

  spell-check:
    name: Spell Check Documentation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install spell checker
      run: |
        sudo apt-get update
        sudo apt-get install -y aspell aspell-en

    - name: Check spelling in documentation
      run: |
        # Create a custom word list for technical terms
        cat > .aspell.en.pws << 'EOF'
        personal_ws-1.1 en 50
        API
        APIs
        async
        bool
        clippy
        crate
        crates
        deserialization
        enum
        impl
        JSON
        metadata
        regex
        rustdoc
        serialization
        struct
        ThreatFlux
        timestamp
        timestamps
        tuple
        usize
        YAML
        EOF
        
        # Check spelling in source documentation
        find src -name "*.rs" -exec aspell --mode=ccpp --personal=.aspell.en.pws list {} \; | sort | uniq || true
        
        # Check README spelling
        aspell --mode=markdown --personal=.aspell.en.pws list < README.md | sort | uniq || true

  generate-examples:
    name: Generate Documentation Examples
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-registry-

    - name: Build and run examples
      run: |
        mkdir -p example-outputs
        
        # Run each example and capture output
        for example in examples/*.rs; do
          example_name=$(basename "$example" .rs)
          echo "Running example: $example_name"
          
          if cargo run --example "$example_name" > "example-outputs/$example_name.txt" 2>&1; then
            echo "✅ Example $example_name succeeded"
          else
            echo "❌ Example $example_name failed"
          fi
        done

    - name: Upload example outputs
      uses: actions/upload-artifact@v4
      with:
        name: example-outputs
        path: example-outputs/
        retention-days: 30