name: Security

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security checks daily at 3 AM UTC
    - cron: '0 3 * * *'
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  audit:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-registry-

    - name: Install cargo-audit
      run: cargo install --force cargo-audit

    - name: Run cargo audit
      run: cargo audit --ignore RUSTSEC-0000-0000

    - name: Upload audit results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: security-audit-results
        path: |
          audit-*.json
        retention-days: 30

  clippy-security:
    name: Clippy Security Lints
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: clippy

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-registry-

    - name: Run Clippy security lints
      run: |
        cargo clippy --all-targets --all-features -- \
          -W clippy::cast_possible_truncation \
          -W clippy::cast_possible_wrap \
          -W clippy::cast_precision_loss \
          -W clippy::cast_sign_loss \
          -W clippy::integer_arithmetic \
          -W clippy::panic \
          -W clippy::panic_in_result_fn \
          -W clippy::unwrap_used \
          -W clippy::expect_used \
          -W clippy::indexing_slicing \
          -W clippy::unreachable \
          -W clippy::todo \
          -W clippy::unimplemented \
          -W clippy::suspicious \
          -W clippy::nursery

  supply-chain:
    name: Supply Chain Security
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-registry-

    - name: Install cargo-deny
      run: cargo install --force cargo-deny

    - name: Check dependencies
      run: |
        # Create a basic deny.toml if it doesn't exist
        if [ ! -f deny.toml ]; then
          cat > deny.toml << 'EOF'
        [graph]
        all-features = true

        [licenses]
        allow = [
            "MIT",
            "Apache-2.0",
            "Apache-2.0 WITH LLVM-exception",
            "BSD-2-Clause",
            "BSD-3-Clause",
            "ISC",
            "Unicode-DFS-2016",
        ]

        [[licenses.exceptions]]
        allow = ["OpenSSL"]
        name = "ring"

        [bans]
        multiple-versions = "warn"
        wildcards = "allow"
        deny = []

        [advisories]
        ignore = []
        EOF
        fi
        cargo deny check

    - name: Check for known vulnerabilities
      run: cargo deny check advisories

    - name: Check license compatibility
      run: cargo deny check licenses

    - name: Check for banned dependencies
      run: cargo deny check bans

  sast:
    name: Static Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: clippy

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-registry-

    - name: Run comprehensive static analysis
      run: |
        # Use clippy with very strict settings for security analysis
        cargo clippy --all-targets --all-features --message-format=json -- \
          -W clippy::all \
          -W clippy::pedantic \
          -W clippy::restriction \
          -W clippy::nursery \
          -A clippy::missing_docs_in_private_items \
          -A clippy::implicit_return \
          -A clippy::separated_literal_suffix \
          -A clippy::decimal_literal_representation \
          > clippy-results.json || true

    - name: Upload static analysis results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: static-analysis-results
        path: clippy-results.json
        retention-days: 30

  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Dependency Review
      uses: actions/dependency-review-action@v4
      with:
        fail-on-severity: moderate
        allow-licenses: MIT, Apache-2.0, BSD-2-Clause, BSD-3-Clause, ISC, Unicode-DFS-2016

  secrets-scan:
    name: Secrets Scanning
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Run TruffleHog
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified

  miri:
    name: Miri (Undefined Behavior Detection)
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust nightly with miri
      uses: dtolnay/rust-toolchain@nightly
      with:
        components: miri

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
        key: ${{ runner.os }}-nightly-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-nightly-cargo-registry-

    - name: Run miri
      run: |
        cargo miri setup
        # Run miri on tests (may need to exclude some tests that use unsupported features)
        cargo miri test --lib --bins || echo "Miri tests failed - this may be expected for some code patterns"

  rustfmt-security:
    name: Code Style Security Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt

    - name: Check code formatting
      run: cargo fmt --all -- --check

    - name: Check for TODO/FIXME/XXX comments
      run: |
        if grep -r --include="*.rs" -i "TODO\|FIXME\|XXX\|HACK" src/; then
          echo "Warning: Found TODO/FIXME/XXX comments that should be reviewed before release"
          exit 1
        fi

  security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs: [audit, clippy-security, supply-chain, sast]
    if: always()
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Generate security report
      run: |
        echo "# Security Report" > SECURITY_REPORT.md
        echo "Generated on: $(date)" >> SECURITY_REPORT.md
        echo "" >> SECURITY_REPORT.md
        
        echo "## Job Results" >> SECURITY_REPORT.md
        echo "- Audit: ${{ needs.audit.result }}" >> SECURITY_REPORT.md
        echo "- Clippy Security: ${{ needs.clippy-security.result }}" >> SECURITY_REPORT.md
        echo "- Supply Chain: ${{ needs.supply-chain.result }}" >> SECURITY_REPORT.md
        echo "- Static Analysis: ${{ needs.sast.result }}" >> SECURITY_REPORT.md
        echo "" >> SECURITY_REPORT.md
        
        echo "## Recommendations" >> SECURITY_REPORT.md
        echo "1. Review any failed security checks above" >> SECURITY_REPORT.md
        echo "2. Update dependencies regularly" >> SECURITY_REPORT.md
        echo "3. Monitor security advisories" >> SECURITY_REPORT.md
        echo "4. Run \`cargo audit\` locally before committing" >> SECURITY_REPORT.md

    - name: Upload security report
      uses: actions/upload-artifact@v4
      with:
        name: security-report
        path: SECURITY_REPORT.md
        retention-days: 90